$red:               hsl(0, 100%, 50%);
$red-orange:       hsl(10, 100%, 50%);
$orange-red:       hsl(20, 100%, 50%);
$orange:           hsl(30, 100%, 50%);
$orange-yellow:    hsl(40, 100%, 50%);
$yellow-orange:    hsl(50, 100%, 50%);
$yellow:           hsl(60, 100%, 50%);
$yellow-lime:      hsl(70, 100%, 50%);
$lime-yellow:      hsl(80, 100%, 50%);
$lime:             hsl(90, 100%, 50%);
$lime-green:      hsl(100, 100%, 50%);
$green-lime:      hsl(110, 100%, 50%);
$green:           hsl(120, 100%, 50%);
$green-teal:      hsl(130, 100%, 50%);
$teal-green:      hsl(140, 100%, 50%);
$teal:            hsl(150, 100%, 50%);
$teal-cyan:       hsl(160, 100%, 50%);
$cyan-teal:       hsl(170, 100%, 50%);
$cyan:            hsl(180, 100%, 50%);
$cyan-azure:      hsl(190, 100%, 50%);
$azure-cyan:      hsl(200, 100%, 50%);
$azure:           hsl(210, 100%, 50%);
$azure-blue:      hsl(220, 100%, 50%);
$blue-azure:      hsl(230, 100%, 50%);
$blue:            hsl(240, 100%, 50%);
$blue-violet:     hsl(250, 100%, 50%);
$violet-blue:     hsl(260, 100%, 50%);
$violet:          hsl(270, 100%, 50%);
$violet-magenta:  hsl(280, 100%, 50%);
$magenta-violet:  hsl(290, 100%, 50%);
$magenta:         hsl(300, 100%, 50%);
$magenta-pink:    hsl(310, 100%, 50%);
$pink-magenta:    hsl(320, 100%, 50%);
$pink:            hsl(330, 100%, 50%);
$pink-red:        hsl(340, 100%, 50%);
$red-pink:        hsl(350, 100%, 50%);
$red-red:         hsl(360, 100%, 50%);

$base-color-accent:              #f6682F;

@function newHue($newHue, $baseHue){
  @if $baseHue >= hue($red) and $baseHue < hue($orange-red) { //if primary is red
    @return $newHue;
  } @else if $baseHue >= hue($orange-red) and $baseHue < hue($yellow-orange) { //if primary is orange
    @return $newHue;
  } @else if $baseHue >= hue($yellow-orange) and $baseHue < hue($lime-yellow) { //if primary is yellow
    @return $newHue;
  } @else if $baseHue >= hue($lime-yellow) and $baseHue < hue($green-teal) { //if primary is green
    @return $newHue;
  } @else if $baseHue >= hue($green-teal) and $baseHue < hue($teal-cyan) { //if primary is teal
    @return $newHue;
  } @else if $baseHue >= hue($teal-cyan) and $baseHue < hue($cyan-azure) { //if primary is cyan
    @return $newHue;
  } @else if $baseHue >= hue($cyan-azure) and $baseHue < hue($azure-blue) { //if primary is azure
    @return $newHue;
  } @else if $baseHue >= hue($azure-blue) and $baseHue < hue($blue-violet) { //if primary is blue
    @return $newHue;
  } @else if $baseHue >= hue($blue-violet) and $baseHue < hue($violet-magenta) { //if primary is violet
    @return $newHue;
  } @else if $baseHue >= hue($violet-magenta) and $baseHue < hue($magenta-pink) { //if primary is magenta
    @return $newHue;
  } @else if $baseHue >= hue($magenta-pink) and $baseHue < hue($pink-red) { //if primary is pink
    @return $newHue;
  } @else if $baseHue >= hue($pink-red) and $baseHue < hue($red-red) { //if primary is red
    @return $newHue;
  }
}

//Need to know what type of color we're going to be adjusting
//Need to know what color we're starting from so we can adjust accordingly
@function getColor($colorType, $fromPrimaryColor: $base-color-accent ) {

  //Need to get the hue of the starting color so we can adjust its value to the desired colortype's hue range
  $baseHue:         hue($fromPrimaryColor);
  $baseSaturation:  saturation($fromPrimaryColor);
  $baseLightness:   lightness($fromPrimaryColor);

  //if type equals error adjust starting color hue to fall within the red range
  @if $colorType == "error" {

    //set new hue values to be calculated for error
    $newHue: adjust-hue($fromPrimaryColor, -($baseHue - hue($red-orange)));
    @return newHue($newHue, $baseHue);
  }

  //if type equals warning adjust starting color hue to fall within the yellow-orange range
  @else if $colorType == "warning" {

    //set new hue values to be calculated for warning
    $newHue: adjust-hue($fromPrimaryColor, -($baseHue - hue($yellow-orange)));
    @return newHue($newHue, $baseHue);
  }

  //if type equals info adjust starting color hue to fall within the cyan-azure range
  @else if $colorType == "info" {

    //set new hue values to be calculated for info
    $newHue: adjust-hue($fromPrimaryColor, -($baseHue - hue($azure-blue)));
    @return newHue($newHue, $baseHue);
  }

  //if type equals success adjust starting color hue to fall within the green range
  @else if $colorType == "success" {

    //set new hue values to be calculated for info
    $newHue: adjust-hue($fromPrimaryColor, -($baseHue - hue($green-teal)));
    @return newHue($newHue, $baseHue);
  }

  //if type equals accent hard
  @else if $colorType == "accent-hard" {

    //rotate 180deg
    @return adjust-hue($fromPrimaryColor, 180);

  }

  //if type equals accent
  @else if $colorType == "accent-soft" {

    //rotate 180deg
    @return adjust-hue($fromPrimaryColor, -90);

  }

  //Give some help to enter a valid value
  @else {
    @error "Sorry, you must enter 'accent-hard','accent-soft', 'error', 'warning', 'info', or 'success'";
  }
  @return cyan;
}




//for testing
.swatch {
  background: gray;
  height: 90px;
  margin-bottom: 30px;
  width: 100%;
}
.swatch--primary {
  background: $base-color-accent;
}
.swatch--accent-hard {
  background: getColor("accent-hard");
}
.swatch--accent-soft {
  background: getColor("accent-soft");
}
.swatch--c1 {
  background: getColor("warning");
}
.swatch--c2 {
  background: getColor("error");
}
.swatch--c3 {
  background: getColor("info");
}
.swatch--c4 {
  background: getColor("success");
}
